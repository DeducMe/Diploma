{"version":3,"sources":["components/Landing/Landing.js","../../src/observers.ts","../../src/InView.tsx"],"names":["Landing","getSearchValues","console","log","props","searchState","searchLoading","setTimeout","onGetSearchResponse","parseOptions","searchOptions","searchType","next","getAvatarFromFirebase","id","pk","fileUploader","storage","ref","child","getDownloadURL","then","response","onSetValuePhoto","catch","err","this","className","searchValues","map","item","index","bg_header_color","vacancy_name","salary","getGradeValues","grade","pub_date","slice","industry","work_type","getWorkTypeValues","join","about","leading","to","searchTypeToUserType","owner_id","src","photo_url","alt","owner","as","onChange","inView","entry","Component","connect","state","search","dispatch","onNullifyValues","type","payload","onNullifySearchOptions","onUpdateValues","values","onSortValues","onChangeSearchQuery","query","options","searchLoaderActivate","getSearchQueries","data","count","results","searchLoaderDeactivate","photo","ObserverMap","RootIds","rootId","optionsToId","Object","key","root","observe","element","callback","instance","elements","observer","IntersectionObserver","entries","thresholds","Array","createObserver","callbacks","isPlainChildren","InView","node","_unobserveCb","handleNode","undefined","handleChange","componentDidUpdate","prevProps","componentWillUnmount","observeNode","threshold","rootMargin","trackVisibility","delay","unobserve","render","children","tag","triggerOnce","initialInView"],"mappings":"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","file":"static/js/9.df5752a2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './landing.css'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport {getSearchQueries} from '../../actions/serverConnections'\r\nimport {searchLoaderDeactivate, searchLoaderActivate} from '../../actions/asyncDispatch'\r\nimport fileUploader from '../../actions/fileUploader';\r\nimport {getGradeValues, getWorkTypeValues, parseOptions, searchTypeToUserType} from '../../scripts/commonScripts'\r\nimport { InView } from \"react-intersection-observer\";\r\n\r\n\r\n\r\nclass Landing extends Component {\r\n    getSearchValues = () => {\r\n        console.log('get')\r\n        if (this.props.searchState.searchLoading === false){\r\n            setTimeout(()=>{\r\n                this.props.onGetSearchResponse(parseOptions(this.props.searchOptions), this.props.searchOptions.searchType, this.props.searchState.next, this.getAvatarFromFirebase)\r\n            },0)\r\n        }\r\n    }\r\n\r\n    getAvatarFromFirebase = (id, pk) =>{   //пришлось делать кучу изменений состояний, потому что один flutter разработчик решил, что он не будет сохранять url. \r\n        const storageRef = fileUploader.storage().ref()\r\n        const fileRef = storageRef.child('user-avatar' + id)\r\n        fileRef.getDownloadURL()\r\n        .then((response) => this.props.onSetValuePhoto(response, pk))\r\n        .catch(err => this.props.onSetValuePhoto('https://firebasestorage.googleapis.com/v0/b/diploma-55e3f.appspot.com/o/placeholder-avatar.jpg?alt=media&token=5058f243-49e5-4df4-8686-899c6ce12c54', pk))\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n        console.log(this.props.searchState)\r\n        this.getSearchValues()\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"landing-wrapper\">\r\n                <div className=\"landing__main white\">\r\n                    <h2 className=\"f-extra-large bold main-header\">Пора встать на первую ступень своей карьерной лестницы!</h2>\r\n                </div>\r\n    \r\n                <ul className=\"landing__recomendations\">\r\n                    {this.props.searchValues.map((item, index) =>\r\n                        <li key={index} className=\"resume resumes-landing-list-el rounded\">\r\n                        <section className=\"resume-main\">\r\n                            <div className={\"resume__header white top-rounded \" + item.bg_header_color }>\r\n                                <div className=\"resume__header-top\">\r\n                                    <h2 className=\"resume__header__name bold text-overflow\">{item.vacancy_name}</h2>\r\n                                    {item.salary === -1 ? <span className=\"resume__header__salary bold text-overflow\">Зарплата не указана</span>:\r\n                                    <span className=\"resume__header__salary bold text-overflow\">{item.salary} руб.</span>}\r\n                                </div>\r\n                                <div className=\"resume__header-bottom\">\r\n                                    <p className=\"resume__header__grade\">{getGradeValues(item.grade)}</p>\r\n                                    <p className=\"resume__publication-date sup\">{item.pub_date.slice(0, 10)}</p>\r\n                                </div>\r\n                                \r\n                            </div>\r\n    \r\n                            <div className=\"resume__main-info bottom-rounded flex\">\r\n                                <div className=\"resume__main-info__text\">\r\n                                    <p className=\"resume__industry f-pre\">{item.industry}</p>\r\n    \r\n                                    <p className=\"resume__work-type\">{item.work_type.map((item)=>getWorkTypeValues(item)).join(', ')}</p>\r\n\r\n                                    <p className=\"resume__about\">{item.about || item.leading}</p>\r\n                                </div>\r\n                                \r\n    \r\n                                {/* <ul className=\"resume__tags-list\">\r\n                                    {item.tags.map((tag, index)=><li key={index} className=\"resume__tags-list-el\">{tag}</li>)}\r\n                                </ul> */}\r\n                                <Link className=\"resume__main-info__avatar-name-block\" to={\"/\"+searchTypeToUserType(this.props.searchOptions.searchType)+\"/\" + item.owner_id}>\r\n                                    <img className=\"avatar-name-block__small-avatar\" src={item.photo_url} alt=\"аватар\"/>\r\n                                    <p>{item.owner}</p>\r\n                                </Link>\r\n                            </div>\r\n                        </section>\r\n                    </li>\r\n                    )}\r\n                </ul>\r\n                <InView as=\"div\" onChange={(inView, entry) => {\r\n                    console.log(inView)\r\n                    if (inView) this.getSearchValues(false)}}>\r\n                </InView>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        searchState:state.search,\r\n        searchOptions:state.search.searchOptions,\r\n        searchValues:state.search.searchValues,\r\n    }\r\n  }\r\n  \r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        onNullifyValues: () => {\r\n            dispatch({type : 'SEARCH_NULLIFY_VALUES', payload:null})\r\n        },\r\n        onNullifySearchOptions: () => {\r\n            dispatch({type : 'SEARCH_NULLIFY_OPTIONS', payload:null})\r\n        },\r\n        onUpdateValues: (values) => {\r\n            dispatch({type : 'SEARCH_UPDATE_VALUES', payload:values})\r\n        },\r\n        onSortValues: (values) => {\r\n            dispatch({type : 'SEARCH_SORT_VALUES', payload:values})\r\n        },\r\n        onChangeSearchQuery: (query) => {\r\n            dispatch({type : 'CHANGE_SEARCH_QUERY', payload:query})\r\n        },\r\n        \r\n        onGetSearchResponse:(options, searchType, next, getAvatarFromFirebase)=>{\r\n            dispatch(searchLoaderActivate())\r\n            dispatch(getSearchQueries(options, searchType, next))\r\n            .then((data)=>{\r\n                if (data.data !== null && data.data !== 404){\r\n                    dispatch({type : 'SEARCH_UPDATE_OPTIONS', payload:data.data.next})\r\n                    dispatch({type : 'SEARCH_UPDATE_RESULTS_COUNT', payload:data.data.count})\r\n                    dispatch({type : 'SEARCH_UPDATE_VALUES', payload:data.data.results}) \r\n                    data.data.results.map((item) => {\r\n                        if (item.photo_url === \"\") getAvatarFromFirebase(item.owner_id, item.pk)\r\n                    })\r\n                }\r\n            })\r\n            .then(response => dispatch(searchLoaderDeactivate()))\r\n            \r\n        },\r\n        onSetValuePhoto: (photo, id) => {\r\n            console.log('photo')\r\n            dispatch({type : 'SEARCH_UPDATE_VALUES_PHOTO', payload:{photo:photo, id:id}})\r\n        },\r\n    }\r\n}\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Landing);","import { ObserverInstanceCallback } from './index';\n\nconst ObserverMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: Map<Element, string> = new Map();\n\nlet rootId = 0;\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root?: Element | null) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n) {\n  if (!element) return () => {};\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observers';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n * Monitors scroll, and triggers the children function with updated props\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const { threshold, root, rootMargin, trackVisibility, delay } = this.props;\n\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay,\n    });\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n"],"sourceRoot":""}