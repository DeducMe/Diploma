[{"D:\\react тесты\\diploma\\dev\\src\\components\\Nav\\Nav.js":"1","D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\ProfileRedactPopup\\redactPopupSections\\RedactPopupSectionBaseInfo.js":"2","D:\\react тесты\\diploma\\dev\\src\\scripts\\commonScripts.js":"3","D:\\react тесты\\diploma\\dev\\src\\components\\Nav\\SearchPanel\\SearchPanel.js":"4","D:\\react тесты\\diploma\\dev\\src\\index.js":"5","D:\\react тесты\\diploma\\dev\\src\\reducers\\cvs.js":"6","D:\\react тесты\\diploma\\dev\\src\\reducers\\buf.js":"7","D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\ProfileRedactPopup\\ProfileRedactPopup.js":"8","D:\\react тесты\\diploma\\dev\\src\\components\\VacancyPopup\\VacancyPopup.js":"9","D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\ProfileRedactPopup\\ImageCropper.js":"10","D:\\react тесты\\diploma\\dev\\src\\reducers\\nav.js":"11","D:\\react тесты\\diploma\\dev\\src\\reducers\\response.js":"12","D:\\react тесты\\diploma\\dev\\src\\components\\ResponsePopup\\ResponsePopup.js":"13","D:\\react тесты\\diploma\\dev\\src\\components\\ResumePopup\\ResumePopup.js":"14","D:\\react тесты\\diploma\\dev\\src\\components\\leafletMap\\testCities.js":"15","D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\ProfileRedactPopup\\redactPopupSections\\RedactPopupSectionBaseInfo.js":"16","D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\ProfileRedactPopup\\ImageCropper.js":"17","D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\ProfileRedactPopup\\MainPlaceholder.js":"18","D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\Resumes\\ResumeRedactPopup\\ResumeRedactPopup.js":"19","D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\Vacancies\\VacancyRedactPopup\\VacancyRedactPopup.js":"20","D:\\react тесты\\diploma\\dev\\src\\App.js":"21","D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\Vacancies\\Vacancies.js":"22","D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\Resumes\\Resumes.js":"23","D:\\react тесты\\diploma\\dev\\src\\reducers\\search.js":"24","D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\ProfileRedactPopup\\ProfileRedactPopup.js":"25","D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\Side\\Side.js":"26","D:\\react тесты\\diploma\\dev\\src\\reducers\\userData.js":"27","D:\\react тесты\\diploma\\dev\\src\\reducers\\user.js":"28","D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\Side\\Side.js":"29","D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\ProfileRedactPopup\\redactPopupSections\\RedactPopupSectionExperience.js":"30","D:\\react тесты\\diploma\\dev\\src\\reducers\\vacancy.js":"31","D:\\react тесты\\diploma\\dev\\src\\components\\Search\\Search.js":"32","D:\\react тесты\\diploma\\dev\\src\\actions\\serverConnections.js":"33"},{"size":12540,"mtime":1618848833627,"results":"34","hashOfConfig":"35"},{"size":11745,"mtime":1618918200145,"results":"36","hashOfConfig":"35"},{"size":6244,"mtime":1618920517634,"results":"37","hashOfConfig":"35"},{"size":2262,"mtime":1618846370666,"results":"38","hashOfConfig":"35"},{"size":1841,"mtime":1618741093134,"results":"39","hashOfConfig":"35"},{"size":6995,"mtime":1618391501910,"results":"40","hashOfConfig":"35"},{"size":1026,"mtime":1618390782447,"results":"41","hashOfConfig":"35"},{"size":6872,"mtime":1618922183618,"results":"42","hashOfConfig":"35"},{"size":4272,"mtime":1618391848786,"results":"43","hashOfConfig":"35"},{"size":6255,"mtime":1618915305289,"results":"44","hashOfConfig":"35"},{"size":4671,"mtime":1618502372018,"results":"45","hashOfConfig":"35"},{"size":3697,"mtime":1618132668874,"results":"46","hashOfConfig":"35"},{"size":3508,"mtime":1618572694483,"results":"47","hashOfConfig":"35"},{"size":3337,"mtime":1618391953732,"results":"48","hashOfConfig":"35"},{"size":69503,"mtime":1618218954892,"results":"49","hashOfConfig":"35"},{"size":4938,"mtime":1618910085441,"results":"50","hashOfConfig":"35"},{"size":7369,"mtime":1618916025498,"results":"51","hashOfConfig":"35"},{"size":6878,"mtime":1618915433377,"results":"52","hashOfConfig":"35"},{"size":18024,"mtime":1618921750577,"results":"53","hashOfConfig":"35"},{"size":27068,"mtime":1618921772050,"results":"54","hashOfConfig":"35"},{"size":1982,"mtime":1618922136369,"results":"55","hashOfConfig":"35"},{"size":6097,"mtime":1618921833385,"results":"56","hashOfConfig":"35"},{"size":7051,"mtime":1618921852035,"results":"57","hashOfConfig":"35"},{"size":6394,"mtime":1618572750153,"results":"58","hashOfConfig":"35"},{"size":5627,"mtime":1618922187385,"results":"59","hashOfConfig":"35"},{"size":249,"mtime":1616174226855,"results":"60","hashOfConfig":"35"},{"size":475,"mtime":1618388304880,"results":"61","hashOfConfig":"35"},{"size":2230,"mtime":1618393435206,"results":"62","hashOfConfig":"35"},{"size":249,"mtime":1614354532959,"results":"63","hashOfConfig":"35"},{"size":8610,"mtime":1616093116195,"results":"64","hashOfConfig":"35"},{"size":11470,"mtime":1618391498583,"results":"65","hashOfConfig":"35"},{"size":1771,"mtime":1618503701201,"results":"66","hashOfConfig":"35"},{"size":20389,"mtime":1618839789747,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},"rkbsr4",{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"93"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"81"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"89"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\react тесты\\diploma\\dev\\src\\components\\Nav\\Nav.js",["147","148","149"],"import React, { Component, useEffect } from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nimport Popup from './Popup/Popup'\r\nimport OptionsPopup from './OptionsPopup/OptionsPopup'\r\n\r\nimport logo from '../../img/logo.svg'\r\nimport arrow from '../../img/arrow.svg'\r\nimport star from '../../img/star.svg'\r\nimport bell from '../../img/bell.svg'\r\nimport fileUploader from '../../actions/fileUploader'\r\nimport SearchPanel from './SearchPanel/SearchPanel'\r\nimport './nav.css'\r\nimport {Link} from 'react-router-dom'\r\nimport {logout, verify} from '../../actions/serverConnections'\r\nimport placeholderAvatar from '../../img/placeholder-avatar.jpg'\r\nimport FavouritesPopup from './FavouritesPopup/FavouritesPopup';\r\n\r\nclass Nav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Не вызывайте здесь this.setState()!\r\n    this.state = { mobileNavOpened: false };\r\n  }\r\n  \r\n  searchToggle = () => {\r\n    if (this.props.navState.searchActive){\r\n      this.props.onSearchDeactivate();\r\n    }\r\n    else{\r\n      this.props.onSearchActivate();\r\n    }\r\n  }\r\n\r\n  registartionPopupOpen = () => {\r\n    this.props.onRegistrationPopupActivate(this.props.history);\r\n  }\r\n\r\n  loginPopupOpen = () => {\r\n    this.props.onLoginPopupActivate(this.props.history);\r\n  }\r\n\r\n  logoutHandleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onLogout()\r\n    this.props.history.push('/landing')\r\n\r\n    this.dropdownToggle()\r\n  }\r\n\r\n  dropdownToggle = () => {\r\n    if (this.props.navState.dropDownState === ''){\r\n      this.props.onDropDownActivate();\r\n    }\r\n    else{\r\n      this.props.onDropDownDeactivate();\r\n    }\r\n  }\r\n\r\n  getAvatarFromFirebase = () =>{   //пришлось делать кучу изменений состояний, потому что один flutter разработчик решил, что он не будет сохранять url. \r\n    const storageRef = fileUploader.storage().ref()\r\n    const fileRef = storageRef.child('user-avatar' + this.props.userState.id)\r\n    fileRef.getDownloadURL()\r\n    .then((response) => this.props.onSetUserMiniAvatar(response))\r\n    .catch(err => this.props.onSetUserMiniAvatar('https://firebasestorage.googleapis.com/v0/b/diploma-55e3f.appspot.com/o/placeholder-avatar.jpg?alt=media&token=5058f243-49e5-4df4-8686-899c6ce12c54'))\r\n  }\r\n\r\n  optionsPopupToggle = () => {\r\n    this.dropdownToggle()\r\n\r\n    if (this.props.navState.optionsPopup.optionsPopupState === ''){\r\n      this.props.onOptionsPopupActivate();\r\n    }\r\n    else{\r\n      this.props.onOptionsPopupDeactivate();\r\n    }\r\n  }\r\n\r\n  checkOnEmpty(el, returnValue){\r\n    if (el !== \"\"){\r\n        return el\r\n    }\r\n\r\n    return returnValue\r\n  }\r\n\r\n  getUserProfileLink = () =>  {\r\n    return \"/\"+(this.props.userState.user_type === 'employee' ? 'profile' : 'company')+\"/\"+this.props.userState.id\r\n  }\r\n\r\n  openFavourites = () =>{\r\n    this.props.onOpenFavouritesPopup()\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.props.onVerifyToken(this.getAvatarFromFirebase)\r\n    if (this.props.logged){\r\n      \r\n    }\r\n  }\r\n\r\n  toggleMobileNav = () =>{\r\n    if (this.state.mobileNavOpened)\r\n      this.setState({mobileNavOpened:false})\r\n    else\r\n      this.setState({mobileNavOpened:true})\r\n  }\r\n  \r\n  render(){\r\n\r\n    if (this.props.logged){\r\n        return (\r\n    <div className={\"nav-block \" + this.props.navState.position + \" \" + this.props.navState.transparency}>\r\n      <div className=\"nav-bar\">\r\n        <div className=\"container\">\r\n          <nav className=\"nav\">\r\n            \r\n            <div className=\"nav__left-side\">\r\n              <Link to=\"/landing\" className=\"nav-el logo\" >\r\n                <img src={logo} alt=\"logo\"/>\r\n              </Link>\r\n\r\n              {/* <Link to=\"/content\" className=\"f-medium semi link-anim nav-el\">Полезное</Link> */}\r\n\r\n              <button  className={\"nav-el nav__search \" + this.props.navState.searchActive} onClick={this.searchToggle}>\r\n                <span className=\"f-medium semi\">Поиск</span> \r\n                <img src={arrow} alt=\"arrow\"/>\r\n              </button>\r\n\r\n            </div>\r\n\r\n            <div className=\"nav__right-side\">\r\n              <Link to=\"/responses\" className=\"nav-el f-medium semi link-anim\">Отклики</Link>\r\n\r\n              {/* <button  className=\"icon-anim nav-el\">\r\n                <img src={bell} alt=\"notifications\"/>\r\n              </button> */}\r\n\r\n              <button  className=\"icon-anim nav-el\" onClick={this.openFavourites}>\r\n                <img src={star} alt=\"favourites\"/>\r\n              </button>\r\n              <div className=\"nav__profile-data nav-el\">\r\n                <div className=\"nav__profile-data__main link-anim\" onClick={this.dropdownToggle}>\r\n                  <Link to={this.getUserProfileLink()} className=\"f-medium semi flex\">\r\n                    <img className=\"nav__profile-data__avatar\" src={this.checkOnEmpty(this.props.navState.avatar, placeholderAvatar)} alt=\"аватар\"/>\r\n                  </Link>\r\n                  <button className=\"nav__profile-data__options-btn\">{this.props.userState.name}</button>\r\n                </div>\r\n                \r\n                <div className={\"nav__profile-data__dropdown bottom-rounded \" + this.props.navState.dropDownState}>\r\n                  <ul className=\"dropdown__list\">\r\n                    <li className=\"dropdown__list-el\" onClick={this.dropdownToggle}>\r\n                      <Link to={this.getUserProfileLink()} className=\"semi\">Моя страница</Link>\r\n                    </li>\r\n                    <li className=\"dropdown__list-el\" onClick={this.optionsPopupToggle}>\r\n                      <button to={this.getUserProfileLink()} className=\"semi\">Настройки</button>\r\n                    </li>\r\n                    <li className=\"dropdown__list-el\" onClick={this.logoutHandleFormSubmit}>\r\n                      <button className=\"semi\">Выход</button>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"nav__right-side-mobile\">\r\n                <div className=\"nav__profile-data nav-el\">\r\n                  <div className=\"nav__profile-data__main link-anim\" onClick={this.dropdownToggle}>\r\n                    <Link to={this.getUserProfileLink()} className=\"f-medium semi flex\">\r\n                      <img className=\"nav__profile-data__avatar\" src={this.checkOnEmpty(this.props.navState.avatar, placeholderAvatar)} alt=\"аватар\"/>\r\n                    </Link>\r\n                    <button className=\"nav__profile-data__options-btn\">{this.props.userState.name}</button>\r\n                  </div>\r\n                  \r\n                  <div className={\"nav__profile-data__dropdown bottom-rounded \" + this.props.navState.dropDownState}>\r\n                    <ul className=\"dropdown__list\">\r\n                      <li className=\"dropdown__list-el\" onClick={this.dropdownToggle}>\r\n                        <Link to={this.getUserProfileLink()} className=\"semi\">Моя страница</Link>\r\n                      </li>\r\n                      <li className=\"dropdown__list-el\" onClick={this.optionsPopupToggle}>\r\n                        <button className=\"semi\">Настройки</button>\r\n                      </li>\r\n                      <li className=\"dropdown__list-el\" onClick={this.dropdownToggle}>\r\n                        <button className=\"semi\" onClick={this.openFavourites}>Избранное</button>\r\n                      </li>\r\n                      <li className=\"dropdown__list-el\" onClick={this.dropdownToggle}>\r\n                        <Link to=\"/responses\" className=\"semi\">Отклики</Link>\r\n                      </li>\r\n                      \r\n                      <li className=\"dropdown__list-el\" onClick={this.logoutHandleFormSubmit}>\r\n                        <button className=\"semi\">Выход</button>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n          </nav>     \r\n        </div> \r\n      </div>\r\n\r\n      <SearchPanel history={this.props.history} active={this.props.navState.searchActive}></SearchPanel>\r\n  \r\n      {this.props.navState.optionsPopup.optionsPopupState === 'active'?(<OptionsPopup history={this.props.history}></OptionsPopup>):('')}\r\n      {this.props.navState.favouritesOpen ? <FavouritesPopup></FavouritesPopup> :''}\r\n    </div>\r\n    )\r\n      }\r\n    else return(\r\n    <div className={\"nav-block \" + this.props.navState.position + \" \" + this.props.navState.transparency}>\r\n      <div className=\"nav-bar\">\r\n        <div className=\"container\">\r\n          <nav className=\"nav\">\r\n            <div className=\"nav__left-side\">\r\n              <Link to=\"/landing\" className=\"nav-el logo\" >\r\n                <img src={logo} alt=\"logo\"/>\r\n              </Link>\r\n\r\n              {/* <Link to=\"/content\" className=\"f-medium semi link-anim nav-el\">Полезное</Link> */}\r\n\r\n              <button  className={\"nav-el nav__search \" + this.props.navState.searchActive} onClick={this.searchToggle}>\r\n                <span className=\"f-medium semi\" >Поиск</span> \r\n                <img src={arrow} alt=\"\"/>\r\n              </button>\r\n\r\n\r\n            </div>\r\n\r\n            <div className=\"nav__right-side\">\r\n              <button className=\"f-medium semi link-anim nav-el\" onClick={this.loginPopupOpen}>Войти</button>\r\n\r\n              <button className=\"f-medium highlighted-btn semi nav-el\" onClick={this.registartionPopupOpen}>Начать карьеру</button>\r\n            </div>    \r\n          \r\n            <div className=\"nav__right-side-mobile\">\r\n              <button className={\"menu-btn \" + (this.state.mobileNavOpened ? \"open\" : \"\")} onClick={this.toggleMobileNav}>\r\n                <div className=\"menu-btn__burger\"></div>\r\n              </button>\r\n                <div className={\"mobile-nav \" + (this.state.mobileNavOpened ? \"open\" : \"\")}>\r\n                  <button className=\"f-medium highlighted-btn semi nav-el\" onClick={this.registartionPopupOpen} onClick={() => { this.registartionPopupOpen(); this.toggleMobileNav();}}>Начать карьеру</button>\r\n\r\n                  <button className=\"f-medium semi link-anim nav-el\" onClick={this.loginPopupOpen}>Войти</button>\r\n                </div>\r\n              </div>\r\n          </nav>     \r\n        </div>  \r\n      </div>\r\n      \r\n      <SearchPanel history={this.props.history} active={this.props.navState.searchActive}></SearchPanel>\r\n      <Popup history={this.props.history}></Popup>\r\n\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) =>{\r\n  return {\r\n    navState: state.nav,\r\n    logged:state.user.logged,\r\n    userState:state.user.user,\r\n    userData:state.userData,\r\n    location:ownProps.ownProps.location.pathname,\r\n    history:ownProps.ownProps.history\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n  return{\r\n    onSetUserMiniAvatar: (photo) => {\r\n      dispatch({type : 'SET_USER_MINI_AVATAR', payload:photo})\r\n    },\r\n    onSearchActivate: () => {\r\n      dispatch({type : 'SEARCH_ACTIVATE', payload:null})\r\n    },\r\n    onSearchDeactivate: () => {\r\n      dispatch({type : 'SEARCH_DEACTIVATE', payload:null})\r\n    },\r\n    onLoginPopupActivate: (history) => {\r\n      history.push('/landing')\r\n      dispatch({type : 'POPUP_ACTIVATE', payload:'login'})\r\n    },\r\n    onRegistrationPopupActivate: (history) => {\r\n      history.push('/landing')\r\n      dispatch({type : 'POPUP_ACTIVATE', payload:'registration'})\r\n    },\r\n    onOpenFavouritesPopup: () => {\r\n      dispatch({type : 'OPEN_FAVOURITES_POPUP', payload:null})\r\n    },\r\n    onOptionsPopupActivate: () => {\r\n      dispatch({type : 'OPTIONS_POPUP_ACTIVATE', payload:null})\r\n    },\r\n    onOptionsPopupDeactivate: () => {\r\n      dispatch({type : 'OPTIONS_POPUP_DEACTIVATE', payload:null})\r\n    },\r\n    onDropDownActivate: () => {\r\n      dispatch({type : 'DROPDOWN_ACTIVATE', payload:null})\r\n    },\r\n    onDropDownDeactivate: () => {\r\n      dispatch({type : 'DROPDOWN_DEACTIVATE', payload:null})\r\n    },\r\n    onVerifyToken: (getAvatarFromFirebase)=>{\r\n      dispatch(verify())\r\n      .then((data)=>{\r\n        if(data.data !== 403){\r\n          dispatch({type : 'USER_LOGIN', payload:null})\r\n        }\r\n      })\r\n      .then((response) => {\r\n        getAvatarFromFirebase()\r\n      })\r\n      \r\n    },\r\n    onLogout: ()=>{\r\n      dispatch(logout())\r\n      dispatch({type : 'USER_LOGOUT', payload:null})\r\n\r\n    },\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Nav);\r\n",["150","151"],"D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\ProfileRedactPopup\\redactPopupSections\\RedactPopupSectionBaseInfo.js",["152","153","154","155"],"D:\\react тесты\\diploma\\dev\\src\\scripts\\commonScripts.js",[],["156","157"],"D:\\react тесты\\diploma\\dev\\src\\components\\Nav\\SearchPanel\\SearchPanel.js",[],"D:\\react тесты\\diploma\\dev\\src\\index.js",[],["158","159"],"D:\\react тесты\\diploma\\dev\\src\\reducers\\cvs.js",[],"D:\\react тесты\\diploma\\dev\\src\\reducers\\buf.js",[],"D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\ProfileRedactPopup\\ProfileRedactPopup.js",["160","161"],"import React, {Component} from 'react'\r\nimport Loader from '../../Loader/Loader'\r\nimport { connect } from 'react-redux'\r\nimport MainPlaceholder from './MainPlaceholder'\r\nimport {createNewEmployee, createNewEmployer, updateEmployee, getUserData} from '../../../actions/serverConnections'\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\nimport RedactPopupSectionBaseInfo from './redactPopupSections/RedactPopupSectionBaseInfo'\r\nimport RedactPopupSectionExperience from './redactPopupSections/RedactPopupSectionExperience'\r\nimport RedactPopupSectionImages from './redactPopupSections/RedactPopupSectionImages'\r\n\r\nimport baseInfoIcon from '../../../img/baseInfo.svg'\r\nimport experienceIcon from '../../../img/experience.svg'\r\nimport personalizationIcon from '../../../img/personalization.svg'\r\n\r\n\r\nclass ProfileRedactPopup extends Component {\r\n    popupClose(e){\r\n        e.preventDefault()\r\n        this.props.onPopupRedactProfileDeactivate();\r\n    }\r\n\r\n    saveRedactProfileFormChanges = (e) =>{\r\n        e.preventDefault();\r\n\r\n        let data = {\r\n            \"user_id\": this.props.userState.user.id,\r\n            \"gender\":this.props.placeholderData.gender,\r\n            \"name\":this.props.placeholderData.userName,\r\n            \"mailing\": true,\r\n            \"language\": this.props.profileState.language,\r\n            \"birthday\": this.props.placeholderData.birthday,\r\n            \"address\": this.props.profileState.address,\r\n            \"phone\": this.props.profileState.userPhones,\r\n            \"about\": this.props.placeholderData.description,\r\n            \"social_links\": [],\r\n            \"education\": this.props.profileState.education,\r\n            \"experience\": this.props.profileState.experience,\r\n            \"citizenship\": this.props.placeholderData.citizenship,\r\n            \"profile_link\": \"\",\r\n            \"photo_url\": this.props.placeholderData.photo_url,\r\n            \"profile_background\": this.props.placeholderData.profile_background\r\n        }\r\n\r\n        if (this.props.userState.user.user_type === 'employee'){\r\n            this.props.onUpdateEmployee(data, this.props.userState.user.id, this.props.onGetUserFetch, this.props.onHasProfile)\r\n        }\r\n        else this.props.onUpdateEmployer(data, this.props.userState.user.id, this.props.onGetUserFetch, this.props.onHasProfile)\r\n\r\n        this.props.onPopupRedactProfileDeactivate();\r\n    }\r\n\r\n    changeSection(section) {\r\n        this.props.onChangeSection(section)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"no-fix-blur-box rounded profile-redact \" + this.props.profileState.state}>\r\n                <div className=\"profile-redact__popup-wrapper\">\r\n                    <MainPlaceholder></MainPlaceholder>\r\n                    <div className=\"profile-redact__form\">\r\n                        <div className=\"profile-redact__form-nav\">\r\n                            <button className={\"popup-nav-btn rounded \" + (this.props.profileState.popupRedactActiveSection === 'baseInfo' ? 'active' : '')} onClick={this.changeSection.bind(this, 'baseInfo')}>\r\n                                <img src={baseInfoIcon} alt=\"Базовая информация\"/>\r\n                            </button>\r\n                            <button className={\"popup-nav-btn rounded \" + (this.props.profileState.popupRedactActiveSection === 'experience' ? 'active' : '')} onClick={this.changeSection.bind(this, 'experience')}>\r\n                                <img src={experienceIcon} alt=\"Опыт и образование\"/>\r\n                            </button>\r\n                            <button className={\"popup-nav-btn rounded \" + (this.props.profileState.popupRedactActiveSection === 'images' ? 'active' : '')} onClick={this.changeSection.bind(this, 'images')}>\r\n                                <img src={personalizationIcon} alt=\"Персонализация\"/>\r\n                            </button>\r\n                        </div>\r\n                        {this.props.profileState.popupRedactActiveSection === 'baseInfo' ? (<RedactPopupSectionBaseInfo></RedactPopupSectionBaseInfo>) : ('')}\r\n                        {this.props.profileState.popupRedactActiveSection === 'experience' ? (<RedactPopupSectionExperience></RedactPopupSectionExperience>) : ('')}\r\n                        {this.props.profileState.popupRedactActiveSection === 'images' ? (<RedactPopupSectionImages></RedactPopupSectionImages>) : ('')}\r\n\r\n                        <button className=\"form-submit-btn f-large rounded bold\" onClick={this.saveRedactProfileFormChanges}>Сохранить изменения</button>\r\n                        <button className=\"profile-redact__close-popup-btn\" onClick={this.popupClose.bind(this)} tabIndex=\"-1\">x</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        profileState: state.profile,\r\n        userState: state.user,\r\n        placeholderData: state.profile.placeholder,\r\n        loaderActive: state.nav.popup.loaderActive,\r\n    }\r\n  }\r\n  \r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        onPopupRedactProfileDeactivate: () => {\r\n            dispatch({type : 'POPUP_REDACT_PROFILE_DEACTIVATE', payload:null})\r\n        },\r\n        onChangeSection: (section) => {\r\n            dispatch({type : 'POPUP_REDACT_CHANGE_SECTION', payload:section})\r\n        },\r\n        onActivateLoader: ()=>{\r\n            dispatch({type : 'ACTIVATE_PROFILE_REDACT_LOADER', payload:null})\r\n        },\r\n        onDeactivateLoader: ()=>{\r\n            dispatch({type : 'DEACTIVATE_PROFILE_REDACT_LOADER', payload:null})\r\n        },\r\n        onCreateNewEmployee:(data, userId, onGetUserFetch, onHasProfile)=>{\r\n            dispatch({type : 'WAITING_FOR_FETCH', payload:null})\r\n            dispatch(createNewEmployee(data))\r\n            .then(data => onGetUserFetch(userId, onHasProfile))\r\n        },\r\n        onCreateNewEmployer:()=>{\r\n            dispatch({type : 'WAITING_FOR_FETCH', payload:null})\r\n        },\r\n        onUpdateEmployee:(data, userId, onGetUserFetch, onHasProfile)=>{\r\n            dispatch({type : 'WAITING_FOR_FETCH', payload:null})\r\n            dispatch(updateEmployee(data, userId))\r\n            .then(data => onGetUserFetch(userId, onHasProfile))\r\n        },\r\n        onUpdateEmployer:()=>{\r\n            dispatch({type : 'WAITING_FOR_FETCH', payload:null})\r\n        },\r\n        onHasProfile: () => {\r\n          dispatch({type : 'USER_HAS_PROFILE', payload:null})\r\n        },\r\n        onGetUserFetch: (userId, onHasProfile)=> {\r\n          dispatch(getUserData(userId))\r\n          .then((data)=>{\r\n              if (data.userData !== null){\r\n                  console.log(data.userData)\r\n                  onHasProfile()\r\n              }\r\n          })\r\n        },\r\n    }\r\n}\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileRedactPopup);",["162","163"],"D:\\react тесты\\diploma\\dev\\src\\components\\VacancyPopup\\VacancyPopup.js",["164"],"import React, { Component, useEffect } from 'react'\r\nimport {getVacancy} from '../../actions/serverConnections'\r\nimport {getGradeValues, getWorkTypeValues} from '../../scripts/commonScripts'\r\nimport { connect } from 'react-redux'\r\nimport './vacancyPopup.css'\r\n\r\nclass VacancyPopup extends Component {\r\n    componentDidMount(){\r\n        this.props.onGetVacancy(this.props.id)\r\n    }\r\n\r\n    popupClose(e){\r\n        e.preventDefault()\r\n        this.props.onCloseVacancyPopup();\r\n    }\r\n\r\n    render() {\r\n        console.log(Object.keys(this.props.openedVacancy).length)\r\n        if (Object.keys(this.props.openedVacancy).length !== 0)\r\n        return (\r\n            <div className=\"blur-box active\" onClick={this.popupClose.bind(this)}>\r\n                <div className=\"resume resumes-list-el popup-wrapper rounded\">\r\n                    <section className=\"resume-main\">\r\n                        <div className={\"resume__header white top-rounded \" + this.props.openedVacancy.bg_header_color}>\r\n                            <div className=\"resume__header-top\">\r\n                                <h2 className=\"resume__header__name bold f-large\">{this.props.openedVacancy.vacancy_name}</h2>\r\n                                <p><span className=\"resume__header__salary bold f-medium\">{this.props.openedVacancy.salary}</span><span className=\"bold f-medium\"> руб.</span></p>\r\n                            </div>\r\n                            <div className=\"resume__header-bottom\">\r\n                                <p className=\"resume__header__grade\">{getGradeValues(this.props.openedVacancy.grade)}</p>\r\n\r\n                                <p className=\"resume__publication-date sup\">{this.props.openedVacancy.pub_date.slice(0,10)}</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"resume__main-info bottom-rounded full-width\">\r\n                            <p className=\"resume__industry f-pre\">{this.props.openedVacancy.industry}</p>\r\n\r\n                            <p className=\"resume__work-type\">{this.props.openedVacancy.work_type.map((el)=>getWorkTypeValues(el)).join(', ')}</p>\r\n\r\n                            <div className=\"vacancy__about\">\r\n                                <p>{this.props.openedVacancy.leading}</p>\r\n                                <ul className=\"vacancy__about__body-list\">\r\n                                    {this.props.openedVacancy.body.map((el, index)=>\r\n                                        <li key={index}>\r\n                                            <h3 className=\"bold f-large\">{el.title}</h3>\r\n\r\n                                            <h4 className=\"bold f-medium\">{el.subtitle}</h4>\r\n\r\n                                            <ul className=\"vacancy__about__body-list__points-list\">\r\n                                            {el.points.map((point, ind) => \r\n                                                <li key={ind}>{point}</li>    \r\n                                            )}\r\n                                            </ul>\r\n                                        </li>\r\n                                    )}\r\n                                </ul>\r\n                                <p>{this.props.openedVacancy.trailing}</p>\r\n                            </div>\r\n                            \r\n                            <ul className=\"resume__tags-list\">\r\n                                {this.props.openedVacancy.tags.map((tag, index)=><li key={index} className=\"resume__tags-list-el\">{tag}</li>)}\r\n\r\n                            </ul>\r\n                        </div>\r\n                    </section>\r\n\r\n                    <button className=\"close-popup-btn\" onClick={this.popupClose.bind(this)} tabIndex=\"-1\">x</button>\r\n                </div>\r\n            </div>\r\n        \r\n        )\r\n        else return ''\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    openedVacancy:state.buf.openedVacancy,\r\n    id:ownProps.id\r\n})\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onGetVacancy: (id) => {\r\n        dispatch(getVacancy(id))\r\n    },\r\n    onCloseVacancyPopup: () => {\r\n        dispatch({type : 'CLOSE_VACANCY_POPUP', payload:null})\r\n\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VacancyPopup);\r\n\r\n",["165","166"],"D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\ProfileRedactPopup\\ImageCropper.js",["167","168","169"],"D:\\react тесты\\diploma\\dev\\src\\reducers\\nav.js",[],"D:\\react тесты\\diploma\\dev\\src\\reducers\\response.js",[],"D:\\react тесты\\diploma\\dev\\src\\components\\ResponsePopup\\ResponsePopup.js",[],"D:\\react тесты\\diploma\\dev\\src\\components\\ResumePopup\\ResumePopup.js",["170"],"import React, { Component, useEffect } from 'react'\r\nimport {getResume} from '../../actions/serverConnections'\r\nimport {getGradeValues, getWorkTypeValues} from '../../scripts/commonScripts'\r\nimport { connect } from 'react-redux'\r\nimport './resumePopup.css'\r\n\r\nclass ResumePopup extends Component {\r\n    componentDidMount(){\r\n        this.props.onGetResume(this.props.id)\r\n    }\r\n\r\n    popupClose(e){\r\n        e.preventDefault()\r\n        this.props.onCloseResumePopup();\r\n    }\r\n\r\n    render() {\r\n        if (Object.keys(this.props.openedResume).length !== 0)\r\n        return (\r\n            <div className=\"blur-box active\" onClick={this.popupClose.bind(this)}>\r\n                <div className=\"resume resumes-list-el popup-wrapper rounded vacancy-info\">\r\n                    <section className=\"resume-main\">\r\n                        <div className={\"resume__header white top-rounded \" + this.props.openedResume.bg_header_color}>\r\n                            <div className=\"resume__header-top\">\r\n                                <h2 className=\"resume__header__name bold f-large\">{this.props.openedResume.vacancy_name}</h2>\r\n                                <p>\r\n                                    {this.props.openedResume.salary === -1 ? <span className=\"resume__header__salary bold f-medium\">Зарплата не указана</span>:\r\n                                    <span className=\"resume__header__salary bold f-medium\">{this.props.openedResume.salary} руб.</span>}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"resume__header-bottom\">\r\n                                <p className=\"resume__header__grade\">{getGradeValues(this.props.openedResume.grade)}</p>\r\n\r\n                                <p className=\"resume__publication-date sup\">{this.props.openedResume.pub_date.slice(0,10)}</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"resume__main-info bottom-rounded full-width\">\r\n                            <p className=\"resume__industry f-pre\">{this.props.openedResume.industry}</p>\r\n\r\n                            <p className=\"resume__work-type\">{this.props.openedResume.work_type.map((el)=>getWorkTypeValues(el)).join(', ')}</p>\r\n\r\n                            <p>{this.props.openedResume.about}</p>\r\n                            \r\n                            <ul className=\"resume__tags-list\">\r\n                                {this.props.openedResume.tags.map((tag, index)=><li key={index} className=\"resume__tags-list-el\">{tag}</li>)}\r\n\r\n                            </ul>\r\n                        </div>\r\n                    </section>\r\n\r\n                    <button className=\"close-popup-btn\" onClick={this.popupClose.bind(this)} tabIndex=\"-1\">x</button>\r\n                </div>\r\n            </div>\r\n        \r\n        )\r\n        else return ''\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    openedResume:state.buf.openedResume,\r\n    id:ownProps.id\r\n})\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onGetResume: (id) => {\r\n        dispatch(getResume(id))\r\n    },\r\n    onCloseResumePopup: () => {\r\n        dispatch({type : 'CLOSE_RESUME_POPUP', payload:null})\r\n\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResumePopup);\r\n\r\n","D:\\react тесты\\diploma\\dev\\src\\components\\leafletMap\\testCities.js",[],"D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\ProfileRedactPopup\\redactPopupSections\\RedactPopupSectionBaseInfo.js",["171"],"import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport LeafletMap from '../../../leafletMap/LeafletMap'\r\n\r\n\r\nconst RedactPopupSectionBaseInfo = (state, profileState, placeholderData) => {\r\n    const changeUserNameValue = (e) => {\r\n        let input = e.target.value\r\n        state.onUsernameChange(input)\r\n    }\r\n\r\n    const changeUserDescriptionValue = (e) => {\r\n        state.onDescriptionChange(e.target.value)\r\n    }\r\n\r\n    const saveNewAddress = (e) => {\r\n        state.onSaveNewAddress({\r\n            name:state.LeafletMapData.name,\r\n            lat:state.LeafletMapData.lat,\r\n            lng:state.LeafletMapData.lng\r\n        })\r\n    }\r\n\r\n    const deletePhone = (e) =>{\r\n        e.preventDefault()\r\n        console.log(e.target.parentElement.dataset.key)\r\n        state.onPhoneDelete(state.placeholderData.phone[e.target.parentElement.dataset.key])\r\n    }\r\n\r\n    const phoneInput = (e) =>{\r\n        const value = e.target.value.split(' ').join('')\r\n        if (e.keyCode === 9 || e.keyCode === 32){\r\n            e.preventDefault()\r\n            if(state.placeholderData.phone.length > 1){\r\n\r\n            }\r\n            else if(state.placeholderData.phone.indexOf(value) === -1){\r\n                state.onPhoneAdd(value)\r\n                e.target.value = ''\r\n            }\r\n        }\r\n    }\r\n\r\n    const addPhone = (e) => {\r\n        e.preventDefault()\r\n        state.onPhoneAdd(e.target.phonesInput.value)\r\n    }\r\n    return (\r\n        <section className=\"popup-redact-section\">\r\n            <div className=\"popup__input-block\">\r\n                <div className=\"input-field underline-anim\">\r\n                    <input className=\"popup__text-input\" id=\"nameInput\" name=\"nameInput\" type=\"text\" placeholder=\" \" onChange={changeUserNameValue} value={state.placeholderData.name}/>\r\n                    <label className=\"popup__text-label\" htmlFor=\"nameInput\">Имя/никнейм</label>\r\n                </div>\r\n\r\n                <div className=\"textarea-field\">\r\n                    <p>Описание профиля</p>\r\n                    <textarea className=\"popup__textarea-input\" name=\"descriptionInput\" id=\"descriptionInput\" onChange={changeUserDescriptionValue} value={state.placeholderData.about}></textarea>\r\n                </div>\r\n\r\n                <div className=\"address-input\">\r\n                    <LeafletMap address={state.profileState.address}></LeafletMap>\r\n                    <button className=\"highlighted sup-btn\" onClick={saveNewAddress}>Сохранить</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"list-input-field popup__input-block\">\r\n                <p>Телефоны</p>\r\n                {state.placeholderData.phone.map((phone, index)=>{\r\n                    return (\r\n                        <div key={index} className=\"list-input-field__el-block\" data-key={index}>\r\n                            <span>{phone}</span>\r\n                            <button className=\"el-block__delete-el\" onClick={deletePhone}>x</button>\r\n                        </div>\r\n                    )\r\n                })}\r\n\r\n                <form onSubmit={addPhone}>\r\n                    <input className=\"popup__text-input\" type=\"text\" id=\"phonesInput\" name=\"phonesInput\" placeholder=\"Нажмите пробел после введения номера...\" onKeyDown={phoneInput} maxLength=\"12\"/>\r\n                    <button type=\"submit\" className=\"sup-btn-circled\">+</button>\r\n                </form>\r\n            </div>\r\n\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        state:state,\r\n        profileState: state.companyProfile,\r\n        userState: state.user,\r\n        placeholderData: state.companyProfile.placeholder,\r\n        LeafletMapData:state.buf.leafletMap.data\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        onUsernameChange: (username)=>{\r\n            dispatch({type : 'POPUP_EMPLOYER_REDACT_USERNAME_CHANGE', payload:username})\r\n        },\r\n        onDescriptionChange: (text)=>{\r\n            dispatch({type : 'POPUP_EMPLOYER_REDACT_DESCRIPTION_CHANGE', payload:text})\r\n        },\r\n        onAddressChange: (text)=>{\r\n            dispatch({type : 'POPUP_EMPLOYER_REDACT_ADDRESS_CHANGE', payload:text})\r\n        },        \r\n        onPhoneAdd: (phone)=>{\r\n            dispatch({type : 'POPUP_EMPLOYER_REDACT_ADD_PHONE', payload:phone})\r\n        },\r\n        onPhoneDelete: (phoneId)=>{\r\n            dispatch({type : 'POPUP_EMPLOYER_REDACT_DELETE_PHONE', payload:phoneId})\r\n        },\r\n        onAddressChange: (text)=>{\r\n            dispatch({type : 'POPUP_EMPLOYER_REDACT_ADDRESS_NAME_CHANGE', payload:text})\r\n        }, \r\n        onSaveNewAddress:(address)=>{\r\n            dispatch({type : 'POPUP_EMPLOYER_REDACT_ADDRESS_CHANGE', payload:address})\r\n        },\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RedactPopupSectionBaseInfo)\r\n\r\n","D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\ProfileRedactPopup\\ImageCropper.js",["172","173"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Cropper from \"react-cropper\";\r\nimport placeholderAvatar from '../../../img/placeholder-avatar.jpg'\r\nimport personalBackground from'../../../img/personal-background.png'\r\nimport firebase from \"firebase\";\r\nimport fileUploader from '../../../actions/fileUploader';\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport closeIcon from '../../../img/close.svg';\r\nimport uploadIcon from '../../../img/upload.svg';\r\n\r\n\r\nclass ImageCropper extends Component {\r\n    cropUserImage = (file, maxWidth, maxHeight, imageType) => {\r\n        this.props.onDeactivateCropper()\r\n        console.log(file)\r\n        setTimeout(()=>{\r\n            if (file !== undefined){\r\n                this.props.onActivateCropper(file, maxWidth, maxHeight, imageType)\r\n            }\r\n        }, 0)\r\n    }\r\n\r\n    checkOnEmpty(el, returnValue){\r\n        console.log(el)\r\n        if (el !== \"\" && el){\r\n            return el\r\n        }\r\n\r\n        return returnValue\r\n    }\r\n\r\n    loadImageToFirebase = (image, imageType) =>{\r\n        console.log(image)\r\n        if (image !== undefined){\r\n            const storageRef = fileUploader.storage().ref()\r\n            const fileRef = storageRef.child('user-' + imageType + this.props.userState.user.id)\r\n            fileRef.put(image).then((response)=>{\r\n                fileRef.getDownloadURL()\r\n                .then((response) => {\r\n                    console.log(response)\r\n                    if (imageType === 'avatar'){\r\n                        this.props.onChangeAvatar(response)\r\n                    }\r\n                    else if(imageType === 'personal-background'){\r\n                        this.props.onChangePersonalBackground(response)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n\r\n    }\r\n    \r\n    getCropperData = () => {\r\n        this.props.onDeactivateCropper()\r\n\r\n        if (typeof this.props.cropperData.instance !== \"undefined\") {\r\n          const croppedImage = this.dataURLtoBlob(this.props.cropperData.instance.getCroppedCanvas().toDataURL());\r\n          this.loadImageToFirebase(croppedImage, this.props.cropperData.imageType)\r\n        }\r\n    };\r\n\r\n    dataURLtoBlob = (dataurl) => {\r\n        var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\r\n            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\r\n        while(n--){\r\n            u8arr[n] = bstr.charCodeAt(n);\r\n        }\r\n        return new Blob([u8arr], {type:mime});\r\n    }\r\n\r\n\r\n    loadUserImage = (e, imageType) =>{\r\n        const file = e.target.files[0];\r\n        this.loadImageToFirebase(file, imageType)\r\n    }\r\n\r\n    deactivateCropper = () =>{\r\n        this.props.onDeactivateCropper()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.cropperFile){\r\n            if(this.props.cropperData.imageType === 'avatar'){\r\n                this.props.onSetCropperFile('https://firebasestorage.googleapis.com/v0/b/diploma-55e3f.appspot.com/o/placeholder-avatar.jpg?alt=media&token=5058f243-49e5-4df4-8686-899c6ce12c54')\r\n            }\r\n            else this.props.onSetCropperFile('https://firebasestorage.googleapis.com/v0/b/diploma-55e3f.appspot.com/o/placeholder-background.png?alt=media&token=1c91f99c-c236-4a28-b291-bfc2263df45b')\r\n        }\r\n\r\n\r\n        return this.props.cropperActive && this.props.cropperFile ? (\r\n            <div className=\"blur-box active\" >\r\n                <div className=\"popup-wrapper rounded cropper\">\r\n                    <div className=\"cropper-block\">\r\n                        {this.props.cropperData.imageType === 'avatar' ?\r\n                        <div className=\"cropper-placeholder\">\r\n                            {console.log(this.props.ownProps.background)}\r\n                            <div className=\"top-rounded main-placeholder__personal\" style={{backgroundImage: `url(${this.checkOnEmpty(this.props.personalBackground, personalBackground)})`}}>\r\n                                <div className=\"cropper__img-preview avatar\"></div>\r\n                            </div>\r\n                        </div>\r\n                        :\r\n                        <div className=\"cropper-placeholder\" >\r\n                            <div className=\"top-rounded cropper__img-preview personal-background\" style={{width:'720px', height: '160px', overflow:'hidden'}}>\r\n\r\n                            </div>\r\n                            <img className=\"main-placeholder__personal__avatar\" src={this.props.ownProps.avatar} alt=\"\"/>\r\n\r\n                        </div>\r\n                        }\r\n                        \r\n\r\n                        <Cropper\r\n                        style={{ width: \"100%\", height: \"300px\", backgroundColor:\"#fff\" }}\r\n                        aspectRatio={this.props.cropperMaxWidth / this.props.cropperMaxHeight}\r\n\r\n                        preview=\".cropper__img-preview\"\r\n                        src={this.props.cropperFile}\r\n                        viewMode={1}\r\n                        dragMode='move'\r\n                        guides={true}\r\n                        minCropBoxHeight={10}\r\n                        minCropBoxWidth={10}\r\n                        background={false}\r\n                        responsive={true}\r\n                        autoCropArea={1}\r\n                        checkOrientation={false} \r\n                        onInitialized={(instance) => {\r\n                            this.props.setCropperInstance(instance);\r\n                        }}\r\n                        />\r\n                        \r\n                        <div className=\"cropper-controls\">\r\n                            <button className=\"cropper-upload-btn\" onClick={this.getCropperData}>\r\n                                <img src={uploadIcon} alt=\"uploadIcon\"/>\r\n                            </button>\r\n\r\n                            <button className=\"cropper-close-btn\" onClick={this.deactivateCropper}>\r\n                                <img src={closeIcon} alt=\"closeIcon\"/>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        ) : ('')\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        cropperMaxWidth:state.profile.buf.cropper.maxWidth,\r\n        cropperMaxHeight:state.profile.buf.cropper.maxHeight,\r\n        cropperFile:state.profile.buf.cropper.file,\r\n        cropperActive:state.profile.buf.cropper.state,\r\n        cropperData:state.profile.buf.cropper,\r\n        userState: state.user,\r\n        ownProps:ownProps\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        setCropperInstance: (instance) => {\r\n            dispatch({type : 'SET_CROPPER_INSTANCE', payload:instance})\r\n        },\r\n        onChangeAvatar: (fileUrl)=>{\r\n            dispatch({type : 'POPUP_REDACT_AVATAR_CHANGE', payload:fileUrl})\r\n        },\r\n        onChangePersonalBackground: (fileUrl)=>{\r\n            dispatch({type : 'POPUP_REDACT_PERSONAL_BACKGROUND_CHANGE', payload:fileUrl})\r\n        },\r\n        onDeactivateCropper:()=>{\r\n            dispatch({type : 'DEACTIVATE_PROFILE_REDACT_IMAGE_CROPPER', payload:null})\r\n        },\r\n        onSetCropperFile:(file) => {\r\n            dispatch({type : 'SET_CROPPER_FILE', payload:file})\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageCropper)\r\n","D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\ProfileRedactPopup\\MainPlaceholder.js",["174","175"],"D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\Resumes\\ResumeRedactPopup\\ResumeRedactPopup.js",[],"D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\Vacancies\\VacancyRedactPopup\\VacancyRedactPopup.js",[],"D:\\react тесты\\diploma\\dev\\src\\App.js",[],["176","177"],"D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\Vacancies\\Vacancies.js",["178"],"D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\Resumes\\Resumes.js",["179"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addResume} from '../../../actions/serverConnections'\r\nimport {getWorkTypeValues, getGradeValues} from '../../../scripts/commonScripts'\r\nimport plusIcon from '../../../img/plusIcon.svg'\r\nimport ResumeRedactPopup from './ResumeRedactPopup/ResumeRedactPopup'\r\nimport editIcon from '../../../img/edit.svg'\r\nimport ResumePopup from '../../ResumePopup/ResumePopup'\r\n\r\nclass Resumes extends Component {\r\n    addResume = (e) => {\r\n        return fetch('../new_cv.json', {\r\n            headers : { \r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json'\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            console.log(data)\r\n            data.user = this.props.userData.user\r\n            return data\r\n        })\r\n        .then (data => {\r\n            this.props.onPopupNewResumeActivate(data)\r\n            // return this.props.onAddResume(data, this.props.onPopupRedactResumeActivate)\r\n        })\r\n    }\r\n\r\n    redactResume = (index) =>{\r\n        this.props.onPopupRedactResumeActivate(index)\r\n    }\r\n\r\n    openResumeInfo = (id) =>{\r\n        this.props.onOpenResumeInfo(id)\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <div className=\"resumes-block\">\r\n                {this.props.userState.logged ? (this.props.cvData.cvs.length !== 0 ?(<h2>Ваши Резюме:</h2>):('')):(this.props.cvData.cvs.length !== 0 ?(<h2>Резюме:</h2>):(''))}\r\n                <ul className=\"resumes-list\">\r\n                    {this.props.cvData.cvs.length !== 0 ? \r\n                    (this.props.cvData.cvs.map((el, index)=>\r\n                            (\r\n                            <li key={index} className=\"resume resumes-list-el rounded\">\r\n                                {el.state==='active' ? (<ResumeRedactPopup index={index}></ResumeRedactPopup>) : ('')}\r\n                                <section className={\"resume-main \" + (el.state === 'active' ? ('muted'):(''))}>\r\n                                    <div className={\"resume__header white top-rounded \" + el.bg_header_color}>\r\n                                        <div className=\"resume__header-top\">\r\n                                            <h2 className=\"resume__header__name bold f-large\" onClick={this.openResumeInfo.bind(this, el.id)}>{el.vacancy_name}</h2>\r\n                                            {el.salary === -1 ? <span className=\"resume__header__salary bold f-medium\">Зарплата не указана</span>:\r\n                                            <span className=\"resume__header__salary bold f-medium\">{el.salary} руб.</span>}\r\n                                        </div>\r\n                                        <div className=\"resume__header-bottom\">\r\n                                            <p className=\"resume__header__grade\">{getGradeValues(el.grade)}</p>\r\n                                            <p className=\"resume__publication-date sup\">{el.pub_date.slice(0,10)}</p>\r\n                                        </div>\r\n                                    </div>\r\n            \r\n                                    <div className=\"resume__main-info rounded\">\r\n                                        <p className=\"resume__industry f-pre\">{el.industry}</p>\r\n            \r\n                                        <p className=\"resume__work-type\">{el.work_type.map((item)=>getWorkTypeValues(item)).join(', ')}</p>\r\n            \r\n                                        <p className=\"resume__about\">{el.about}</p>\r\n            \r\n                                        {/* <ul className=\"resume__portfolio\">\r\n                                            <li className=\"resume__portfolio-el\">\r\n                                                <a className=\"resume__portfolio-el__link\" href=\"#\">\r\n                                                    <img src=\"\" alt=\"\"/>\r\n                                                </a>\r\n                                            </li>\r\n            \r\n                                            <li className=\"resume__portfolio-el\">\r\n                                                <a className=\"resume__portfolio-el__link\" href=\"#\">\r\n                                                    <img src=\"\" alt=\"\"/>\r\n                                                </a>\r\n                                            </li>\r\n                                        </ul> */}\r\n            \r\n                                        <ul className=\"resume__tags-list\">\r\n                                            {el.tags.map((tag, index)=><li key={index} className=\"resume__tags-list-el\">{tag}</li>)}\r\n\r\n                                        </ul>\r\n                                    </div>\r\n                                </section>\r\n                                {this.props.userState.logged && this.props.userState.user.id === this.props.userData.user?(\r\n                                    <button className=\"resume-redact-btn\"  onClick={this.redactResume.bind(this, index)}>\r\n                                        <img src={editIcon} alt=\"editIcon\"/>\r\n                                    </button>\r\n                                ):('')}\r\n                                \r\n                            </li>\r\n                            )\r\n                        )\r\n                    ):('')}\r\n\r\n                    {this.props.cvData.newCv.length!==0 ? (this.props.cvData.newCv.state==='active' ? (<ResumeRedactPopup index={this.props.cvData.cvs.length}></ResumeRedactPopup>) : ('')) : ('')}\r\n                </ul>\r\n                {this.props.userState.logged && this.props.userState.user.id === this.props.userData.user && this.props.cvData.newCv.state!=='active' ? (\r\n                    <div className=\"resume-add\">\r\n                        <p>Добавить резюме:</p>\r\n                        <button className=\"resume-add-btn\" onClick={this.addResume.bind(this, 0)}>\r\n                            <img src={plusIcon} alt=\"plusIcon\"/>\r\n                        </button>\r\n                    </div>)\r\n                :('')}\r\n                {this.props.cvData.openedResumeId !== -1 ? <ResumePopup id={this.props.cvData.openedResumeId}></ResumePopup> : ''}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        userState: state.user,\r\n        userData: state.userData,\r\n        cvData: state.cvs,\r\n    }\r\n}\r\n  \r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        onPopupRedactResumeActivate: (resumeIndex) => {\r\n            dispatch({type : 'POPUP_REDACT_RESUME_ACTIVATE', payload:resumeIndex})\r\n        },\r\n        onPopupNewResumeActivate: (newCvData) => {\r\n            dispatch({type : 'POPUP_NEW_RESUME_ACTIVATE', payload:newCvData})\r\n        },\r\n        onOpenResumeInfo: (id) =>{\r\n            dispatch({type : 'OPEN_RESUME_POPUP', payload:id})\r\n        }\r\n\r\n    }\r\n}\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Resumes);","D:\\react тесты\\diploma\\dev\\src\\reducers\\search.js",["180"],"D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\ProfileRedactPopup\\ProfileRedactPopup.js",["181","182"],"D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\Side\\Side.js",[],"D:\\react тесты\\diploma\\dev\\src\\reducers\\userData.js",[],"D:\\react тесты\\diploma\\dev\\src\\reducers\\user.js",[],"D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\Side\\Side.js",[],"D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\ProfileRedactPopup\\redactPopupSections\\RedactPopupSectionExperience.js",[],"D:\\react тесты\\diploma\\dev\\src\\reducers\\vacancy.js",[],"D:\\react тесты\\diploma\\dev\\src\\components\\Search\\Search.js",["183"],"D:\\react тесты\\diploma\\dev\\src\\actions\\serverConnections.js",["184"],{"ruleId":"185","severity":1,"message":"186","line":1,"column":28,"nodeType":"187","messageId":"188","endLine":1,"endColumn":37},{"ruleId":"185","severity":1,"message":"189","line":10,"column":8,"nodeType":"187","messageId":"188","endLine":10,"endColumn":12},{"ruleId":"190","severity":1,"message":"191","line":238,"column":113,"nodeType":"192","endLine":238,"endColumn":185},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","severity":1,"message":"198","line":97,"column":69,"nodeType":"199","messageId":"200","endLine":97,"endColumn":70,"suggestions":"201"},{"ruleId":"197","severity":1,"message":"202","line":97,"column":71,"nodeType":"199","messageId":"200","endLine":97,"endColumn":72,"suggestions":"203"},{"ruleId":"197","severity":1,"message":"198","line":115,"column":77,"nodeType":"199","messageId":"200","endLine":115,"endColumn":78,"suggestions":"204"},{"ruleId":"197","severity":1,"message":"202","line":115,"column":79,"nodeType":"199","messageId":"200","endLine":115,"endColumn":80,"suggestions":"205"},{"ruleId":"193","replacedBy":"206"},{"ruleId":"195","replacedBy":"207"},{"ruleId":"193","replacedBy":"208"},{"ruleId":"195","replacedBy":"209"},{"ruleId":"185","severity":1,"message":"210","line":2,"column":8,"nodeType":"187","messageId":"188","endLine":2,"endColumn":14},{"ruleId":"185","severity":1,"message":"211","line":5,"column":28,"nodeType":"187","messageId":"188","endLine":5,"endColumn":45},{"ruleId":"193","replacedBy":"212"},{"ruleId":"195","replacedBy":"213"},{"ruleId":"185","severity":1,"message":"186","line":1,"column":28,"nodeType":"187","messageId":"188","endLine":1,"endColumn":37},{"ruleId":"193","replacedBy":"214"},{"ruleId":"195","replacedBy":"215"},{"ruleId":"185","severity":1,"message":"216","line":4,"column":8,"nodeType":"187","messageId":"188","endLine":4,"endColumn":16},{"ruleId":"185","severity":1,"message":"217","line":5,"column":8,"nodeType":"187","messageId":"188","endLine":5,"endColumn":25},{"ruleId":"185","severity":1,"message":"218","line":6,"column":8,"nodeType":"187","messageId":"188","endLine":6,"endColumn":26},{"ruleId":"185","severity":1,"message":"186","line":1,"column":28,"nodeType":"187","messageId":"188","endLine":1,"endColumn":37},{"ruleId":"219","severity":1,"message":"220","line":117,"column":9,"nodeType":"221","messageId":"222","endLine":117,"endColumn":24},{"ruleId":"185","severity":1,"message":"217","line":4,"column":8,"nodeType":"187","messageId":"188","endLine":4,"endColumn":25},{"ruleId":"185","severity":1,"message":"216","line":6,"column":8,"nodeType":"187","messageId":"188","endLine":6,"endColumn":16},{"ruleId":"185","severity":1,"message":"223","line":7,"column":8,"nodeType":"187","messageId":"188","endLine":7,"endColumn":15},{"ruleId":"224","severity":1,"message":"225","line":52,"column":80,"nodeType":"226","endLine":52,"endColumn":120},{"ruleId":"193","replacedBy":"227"},{"ruleId":"195","replacedBy":"228"},{"ruleId":"185","severity":1,"message":"229","line":3,"column":10,"nodeType":"187","messageId":"188","endLine":3,"endColumn":20},{"ruleId":"185","severity":1,"message":"230","line":3,"column":10,"nodeType":"187","messageId":"188","endLine":3,"endColumn":19},{"ruleId":"231","severity":1,"message":"232","line":38,"column":34,"nodeType":"233","messageId":"234","endLine":38,"endColumn":36},{"ruleId":"185","severity":1,"message":"210","line":2,"column":8,"nodeType":"187","messageId":"188","endLine":2,"endColumn":14},{"ruleId":"185","severity":1,"message":"235","line":7,"column":8,"nodeType":"187","messageId":"188","endLine":7,"endColumn":20},{"ruleId":"185","severity":1,"message":"236","line":10,"column":9,"nodeType":"187","messageId":"188","endLine":10,"endColumn":25},{"ruleId":"185","severity":1,"message":"237","line":44,"column":10,"nodeType":"187","messageId":"188","endLine":44,"endColumn":31},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'bell' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["238"],"no-negated-in-lhs",["239"],"no-useless-escape","Unnecessary escape character: \\(.","Literal","unnecessaryEscape",["240","241"],"Unnecessary escape character: \\).",["242","243"],["244","245"],["246","247"],["238"],["239"],["238"],["239"],"'Loader' is defined but never used.","'createNewEmployer' is defined but never used.",["238"],["239"],["238"],["239"],"'firebase' is defined but never used.","'placeholderAvatar' is defined but never used.","'personalBackground' is defined but never used.","no-dupe-keys","Duplicate key 'onAddressChange'.","ObjectExpression","unexpected","'Cropper' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["238"],["239"],"'addVacancy' is defined but never used.","'addResume' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'fileUploader' is defined but never used.","'getSearchQueries' is defined but never used.","'verifyUserFetchSucces' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"248","fix":"249","desc":"250"},{"messageId":"251","fix":"252","desc":"253"},{"messageId":"248","fix":"254","desc":"250"},{"messageId":"251","fix":"255","desc":"253"},{"messageId":"248","fix":"256","desc":"250"},{"messageId":"251","fix":"257","desc":"253"},{"messageId":"248","fix":"258","desc":"250"},{"messageId":"251","fix":"259","desc":"253"},"removeEscape",{"range":"260","text":"261"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"262","text":"263"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"264","text":"261"},{"range":"265","text":"263"},{"range":"266","text":"261"},{"range":"267","text":"263"},{"range":"268","text":"261"},{"range":"269","text":"263"},[3421,3422],"",[3421,3421],"\\",[3423,3424],[3423,3423],[4016,4017],[4016,4016],[4018,4019],[4018,4018]]