[{"D:\\react тесты\\diploma\\dev\\src\\index.js":"1","D:\\react тесты\\diploma\\dev\\src\\reducers\\cvs.js":"2","D:\\react тесты\\diploma\\dev\\src\\components\\Nav\\FavouritesPopup\\FavouritesPopup.js":"3","D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\ProfileRedactPopup\\ProfileRedactPopup.js":"4","D:\\react тесты\\diploma\\dev\\src\\components\\leafletMap\\LeafletMap.js":"5","D:\\react тесты\\diploma\\dev\\src\\components\\leafletMap\\testCities.js":"6","D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\Resumes\\Resumes.js":"7","D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\Vacancies\\Vacancies.js":"8","D:\\react тесты\\diploma\\dev\\src\\App.js":"9","D:\\react тесты\\diploma\\dev\\src\\actions\\serverConnections.js":"10","D:\\react тесты\\diploma\\dev\\src\\reducers\\favourites.js":"11","D:\\react тесты\\diploma\\dev\\src\\reducers\\userData.js":"12","D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\ProfileRedactPopup\\redactPopupSections\\RedactPopupSectionImages.js":"13","D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\ProfileRedactPopup\\ImageCropper.js":"14","D:\\react тесты\\diploma\\dev\\src\\reducers\\nav.js":"15","D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\Main\\Main.js":"16","D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\Resumes\\ResumeRedactPopup\\ResumeRedactPopup.js":"17","D:\\react тесты\\diploma\\dev\\src\\components\\Nav\\Nav.js":"18","D:\\react тесты\\diploma\\dev\\src\\components\\Search\\Search.js":"19","D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\ProfileRedactPopup\\ImageCropper.js":"20","D:\\react тесты\\diploma\\dev\\src\\components\\Nav\\Popup\\Popup.js":"21"},{"size":1841,"mtime":1618741093134,"results":"22","hashOfConfig":"23"},{"size":6995,"mtime":1618391501910,"results":"24","hashOfConfig":"23"},{"size":10161,"mtime":1618742866055,"results":"25","hashOfConfig":"23"},{"size":5662,"mtime":1616668786388,"results":"26","hashOfConfig":"23"},{"size":4109,"mtime":1618221399060,"results":"27","hashOfConfig":"23"},{"size":69503,"mtime":1618218954892,"results":"28","hashOfConfig":"23"},{"size":7158,"mtime":1618741188148,"results":"29","hashOfConfig":"23"},{"size":6196,"mtime":1618741210839,"results":"30","hashOfConfig":"23"},{"size":1943,"mtime":1618741233954,"results":"31","hashOfConfig":"23"},{"size":19398,"mtime":1618769889974,"results":"32","hashOfConfig":"23"},{"size":2014,"mtime":1618742287327,"results":"33","hashOfConfig":"23"},{"size":475,"mtime":1618388304880,"results":"34","hashOfConfig":"23"},{"size":5022,"mtime":1616093116028,"results":"35","hashOfConfig":"23"},{"size":5982,"mtime":1616516540996,"results":"36","hashOfConfig":"23"},{"size":4671,"mtime":1618502372018,"results":"37","hashOfConfig":"23"},{"size":6697,"mtime":1617957893510,"results":"38","hashOfConfig":"23"},{"size":17700,"mtime":1618559683857,"results":"39","hashOfConfig":"23"},{"size":12816,"mtime":1618768871270,"results":"40","hashOfConfig":"23"},{"size":1771,"mtime":1618503701201,"results":"41","hashOfConfig":"23"},{"size":5843,"mtime":1616518399271,"results":"42","hashOfConfig":"23"},{"size":13627,"mtime":1618769234945,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"rkbsr4",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\react тесты\\diploma\\dev\\src\\index.js",[],["90","91"],"D:\\react тесты\\diploma\\dev\\src\\reducers\\cvs.js",[],"D:\\react тесты\\diploma\\dev\\src\\components\\Nav\\FavouritesPopup\\FavouritesPopup.js",["92","93","94"],"D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\ProfileRedactPopup\\ProfileRedactPopup.js",["95","96"],"D:\\react тесты\\diploma\\dev\\src\\components\\leafletMap\\LeafletMap.js",["97","98","99"],"D:\\react тесты\\diploma\\dev\\src\\components\\leafletMap\\testCities.js",[],"D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\Resumes\\Resumes.js",["100"],"D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\Vacancies\\Vacancies.js",["101"],"D:\\react тесты\\diploma\\dev\\src\\App.js",[],["102","103"],"D:\\react тесты\\diploma\\dev\\src\\actions\\serverConnections.js",["104"],"const url = 'http://job-flow.ru/api'  //http://localhost:3000\r\n// const xCSRF = 'X-CSRFToken': document.cookie.split('=')[1]\r\nfunction fetchError(){\r\n    return{\r\n        type:'FETCH_ERROR',\r\n        data:null\r\n    }\r\n}\r\n\r\nfunction getUserDataFetchSucces(userData){\r\n    return{\r\n        type:'GET_USER_DATA_FETCH_SUCCES',\r\n        userData\r\n    }\r\n}\r\n\r\nfunction registarteUserFetchSucces(data){\r\n    return{\r\n        type:'REGISTRATE_USER_FETCH_SUCCES',\r\n        data\r\n    }\r\n}\r\n\r\nfunction getUserResumesFetchSuccess(data){\r\n    return{\r\n        type:'GET_USER_RESUMES_FETCH_SUCCES',\r\n        data\r\n    }\r\n}\r\n\r\nfunction logoutUserFetchSucces(data){\r\n    return{\r\n        type:'LOGOUT_USER_FETCH_SUCCES',\r\n        data\r\n    }\r\n}\r\n\r\nfunction loginUserFetchSucces(data){\r\n    return{\r\n        type:'LOGIN_USER_FETCH_SUCCES',\r\n        data\r\n    }\r\n}\r\n\r\nfunction verifyUserFetchSucces(data){\r\n    return{\r\n        type:'VERIFY_USER_FETCH_SUCCES',\r\n        data\r\n    }\r\n}\r\n\r\nfunction changePasswordUserFetchSucces(data){\r\n    return{\r\n        type:'CHANGE_PASSWORD_USER_FETCH_SUCCES',\r\n        data\r\n    }\r\n}\r\n\r\nfunction createNewEmployerFetchSucces(){\r\n    return{\r\n        type:'CREATE_NEW_EMPLOYER_FETCH_SUCCES'\r\n    }\r\n}\r\n\r\nfunction getEmployerFetchSucces(userData){\r\n    return{\r\n        type:'GET_EMPLOYER_FETCH_SUCCESS',\r\n        userData\r\n    }\r\n}\r\n\r\nfunction updateEmployerFetchSucces(){\r\n    return{\r\n        type:'UPDATE_EMPLOYER_FETCH_SUCCES'\r\n    }\r\n}\r\n\r\nfunction getUserVacanciesFetchSuccess(data){\r\n    return{\r\n        type:'GET_USER_VACANCIES_FETCH_SUCCES',\r\n        data\r\n    }\r\n}\r\n\r\nfunction getVacancyFetchSucces(data){\r\n    return{\r\n        type:'GET_VACANCY_FETCH_SUCCES',\r\n        data\r\n    }\r\n}\r\n\r\nfunction getResumeFetchSucces(data){\r\n    return{\r\n        type:'GET_RESUME_FETCH_SUCCES',\r\n        data\r\n    }\r\n}\r\n\r\nfunction addVacancyFetchSucces(){\r\n    return{\r\n        type:'ADD_RESUME_FETCH_SUCCES'\r\n    }\r\n}\r\n\r\nfunction deleteVacancyFetchSucces(){\r\n    return{\r\n        type:'DELETE_RESUME_FETCH_SUCCES'\r\n    }\r\n}\r\n\r\nfunction redactVacancyFetchSucces(){\r\n    return{\r\n        type:'REDACT_RESUME_FETCH_SUCCES'\r\n    }\r\n}\r\n\r\nfunction updateEmployeeFetchSucces(){\r\n    return{\r\n        type:'UPDATE_EMPLOYEE_FETCH_SUCCES'\r\n    }\r\n}\r\n\r\nfunction createNewEmployeeFetchSucces(){\r\n    return{\r\n        type:'CREATE_NEW_EMPLOYEE_FETCH_SUCCES'\r\n    }\r\n}\r\n\r\nfunction addResumeFetchSucces(){\r\n    return{\r\n        type:'ADD_RESUME_FETCH_SUCCES'\r\n    }\r\n}\r\n\r\nfunction redactResumeFetchSucces(){\r\n    return{\r\n        type:'REDACT_RESUME_FETCH_SUCCES'\r\n    }\r\n}\r\n\r\nfunction deleteResumeFetchSucces() {\r\n    return{\r\n        type:'DELETE_RESUME_FETCH_SUCCES'\r\n    }\r\n}\r\n\r\nfunction getFavouritesFetchSucces(data){\r\n    return{\r\n        type:'GET_FAVOURITES_QUERY_FETCH_SUCCES',\r\n        data\r\n    }\r\n}\r\n\r\nfunction getFavouritesNone(data){\r\n    return{\r\n        type:'GET_FAVOURITES_QUERY_NONE',\r\n        data\r\n    }\r\n}\r\n\r\nfunction getSearchFetchSucces(data){\r\n    return{\r\n        type:'GET_SEARCH_QUERY_FETCH_SUCCES',\r\n        data\r\n    }\r\n}\r\n\r\nfunction getSearchNone(data){\r\n    return{\r\n        type:'GET_SEARCH_QUERY_NONE',\r\n        data\r\n    }\r\n}\r\n\r\nfunction getResponseFetchSucces(data){\r\n    return{\r\n        type:'GET_RESPONSE_QUERY_FETCH_SUCCES',\r\n        data\r\n    }\r\n}\r\n\r\nfunction getResponseNone(data){\r\n    return{\r\n        type:'GET_RESPONSE_QUERY_NONE',\r\n        data\r\n    }\r\n}\r\n\r\nfunction getAnswersFetchSucces(data){\r\n    return{\r\n        type:'GET_ANSWERS_QUERY_FETCH_SUCCES',\r\n        data\r\n    }\r\n}\r\n\r\nfunction getAnswersNone(data){\r\n    return{\r\n        type:'GET_ANSWERS_QUERY_NONE',\r\n        data\r\n    }\r\n}\r\n\r\nfunction onCreateResponse(){\r\n    return{\r\n        type:'CREATE_REPONSE'\r\n    }\r\n}\r\n\r\nfunction notFoundError(userData){\r\n    return{\r\n        type:'404_ERROR',\r\n        userData\r\n    }\r\n}\r\n\r\nexport const getUserData = (userId) => (dispatch) => {\r\n    console.log(userId)\r\n    return fetch(url + '/workers/'+userId,{\r\n        method: 'GET',\r\n        \r\n    })  //userId\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        if (data !== '404')\r\n        return dispatch(getUserDataFetchSucces(data))\r\n        else return dispatch(notFoundError(data))\r\n    })\r\n}\r\n\r\nexport const getUserResumes = (userId) => (dispatch) => {\r\n    console.log(userId)\r\n    return fetch(url + '/cv/user/'+userId,{\r\n        method: 'GET',\r\n        \r\n    })  //userId\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        if (data !== '404')\r\n        return dispatch(getUserResumesFetchSuccess(data))\r\n        else return dispatch(notFoundError(data))\r\n    })\r\n}\r\n\r\nexport const addResume = (data) => (dispatch) => {\r\n    console.log(data)\r\n    return fetch(url + '/cv/',{\r\n        method: 'POST',\r\n        body: JSON.stringify(data),  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        },  \r\n        \r\n    })  \r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(    data)\r\n        if (data !== '404')\r\n        return dispatch(addResumeFetchSucces(data.new_cv_id))\r\n        else return dispatch(notFoundError(data))\r\n    })\r\n}\r\n\r\nexport const deleteResume = (id) => (dispatch) => {\r\n    return fetch(url + '/cv/' + id,{\r\n        method: 'DELETE',  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        },  \r\n        \r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        return dispatch(deleteResumeFetchSucces(data))\r\n    })\r\n    .catch(err => dispatch({ type: 'SOME_ERROR', err }))\r\n}\r\n\r\nexport const redactResume = (data, cvId) => (dispatch) => {\r\n    console.log(data)\r\n    return fetch(url + '/cv/'+cvId,{\r\n        method: 'PUT',\r\n        body: JSON.stringify(data),  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        }\r\n    })  \r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        if (data !== '404')\r\n        return dispatch(redactResumeFetchSucces())\r\n        else return dispatch(notFoundError(data))\r\n    })\r\n}\r\n\r\nexport const verify = (data) => (dispatch) => {\r\n    console.log(JSON.stringify(data))\r\n    return fetch(url + '/auth/user/',{\r\n        method: 'GET',  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        }\r\n    })\r\n    .then(response => \r\n        {\r\n            if (response.status !== 403)\r\n            return response.json()\r\n            else return response.status;\r\n        }\r\n    )\r\n    .then(data => {\r\n        return dispatch(loginUserFetchSucces(data))\r\n    })\r\n    .catch(err => dispatch({ type: 'SOME_ERROR', err }))\r\n}\r\n\r\nexport const loginUser = (data) => (dispatch) => {\r\n    console.log(JSON.stringify(data))\r\n    return fetch(url + '/auth/login/',{\r\n        method: 'POST',  \r\n        body: JSON.stringify(data),  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        }\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        return dispatch(loginUserFetchSucces(data.user))\r\n    })\r\n    .catch(err => dispatch({ type: 'SOME_ERROR', err }))\r\n}\r\n\r\nexport const registrateNewUser = (data) => (dispatch) => {\r\n    console.log(JSON.stringify(data))\r\n    return fetch(url + '/register/',{\r\n        method: 'POST',  \r\n        body: JSON.stringify(data),  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        }\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => dispatch(registarteUserFetchSucces(data)))\r\n    .catch(err => dispatch({ type: 'SOME_ERROR', err }))\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    return fetch(url + '/auth/logout/',{\r\n        method: 'POST', \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        } \r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        return dispatch(logoutUserFetchSucces(data))\r\n    })\r\n    .catch(err => dispatch({ type: 'SOME_ERROR', err }))\r\n}\r\n\r\nexport const changePassword = (password) => (dispatch) => {\r\n    return fetch(url + '/auth/password/change/',{\r\n        method: 'POST',  \r\n        body: JSON.stringify({\r\n            \"new_password1\": password,\r\n            \"new_password2\": password\r\n        }),  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        } \r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        return dispatch(changePasswordUserFetchSucces(data))\r\n    })\r\n    .catch(err => dispatch({ type: 'SOME_ERROR', err }))\r\n}\r\n\r\nexport const createNewEmployee = (data) => (dispatch) => {\r\n    return fetch(url + '/workers',{\r\n        method: 'POST',  \r\n        body: JSON.stringify(data),  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        },  \r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        return dispatch(createNewEmployeeFetchSucces())\r\n    })\r\n    .catch(err => dispatch({ type: 'SOME_ERROR', err }))\r\n}\r\n\r\nexport const updateEmployee = (data, userId) => (dispatch) => {\r\n    console.log(JSON.stringify(data))\r\n    return fetch(url + '/workers/' + userId,{\r\n        method: 'PUT',  \r\n        body: JSON.stringify(data),  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        },  \r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        return dispatch(updateEmployeeFetchSucces())\r\n    })\r\n    .catch(err => dispatch({ type: 'SOME_ERROR', err }))\r\n}\r\n\r\n\r\nexport const createNewEmployer = (data) => (dispatch) => {\r\n    console.log(JSON.stringify(data))\r\n    return fetch(url + '/employers',{\r\n        method: 'POST',  \r\n        body: JSON.stringify(data),  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        },  \r\n    })\r\n    .then(response => response.json())\r\n    .then(data => dispatch(createNewEmployerFetchSucces()))\r\n    .catch(err => dispatch({ type: 'SOME_ERROR', err }))\r\n}\r\n\r\nexport const getEmployer = (userId) => (dispatch) => {\r\n    return fetch(url + '/employers/' + userId,{\r\n        method: 'GET',\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => dispatch(getEmployerFetchSucces(data)))\r\n    .catch(err => dispatch({ type: 'SOME_ERROR', err }))\r\n}\r\n\r\nexport const updateEmployer = (data, userId) => (dispatch) => {\r\n    console.log(JSON.stringify(data))\r\n    return fetch(url + '/employers/' + userId,{\r\n        method: 'PUT',  \r\n        body: JSON.stringify(data),  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        },  \r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        return dispatch(updateEmployerFetchSucces())\r\n    })\r\n    .catch(err => dispatch({ type: 'SOME_ERROR', err }))\r\n}\r\n\r\nexport const getUserVacancies = (userId) => (dispatch) => {\r\n    console.log(userId)\r\n    return fetch(url + '/vacancy/user/' + userId,{\r\n        method: 'GET',\r\n        \r\n    })  //userId\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        if (data !== '404')\r\n        return dispatch(getUserVacanciesFetchSuccess(data))\r\n        else return dispatch(notFoundError(data))\r\n    })\r\n}\r\n\r\nexport const addVacancy = (data) => (dispatch) => {\r\n    console.log(data)\r\n    return fetch(url + '/vacancy/',{\r\n        method: 'POST',\r\n        body: JSON.stringify(data),  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        },  \r\n        \r\n    })  \r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        if (data !== '404')\r\n        return dispatch(addVacancyFetchSucces(data.new_vacancy_id))\r\n        else return dispatch(notFoundError(data))\r\n    })\r\n}\r\n\r\n\r\nexport const deleteVacancy = (id) => (dispatch) => {\r\n    return fetch(url + '/vacancy/' + id,{\r\n        method: 'DELETE',  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        },  \r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        return dispatch(deleteVacancyFetchSucces(data))\r\n    })\r\n    .catch(err => dispatch({ type: 'SOME_ERROR', err }))\r\n}\r\n\r\nexport const redactVacancy = (data, cvId) => (dispatch) => {\r\n    console.log(data)\r\n    return fetch(url + '/vacancy/'+cvId,{\r\n        method: 'PUT',\r\n        body: JSON.stringify(data),  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        },  \r\n        \r\n    })  \r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        if (data !== '404')\r\n        return dispatch(redactVacancyFetchSucces())\r\n        else return dispatch(notFoundError(data))\r\n    })\r\n}\r\n\r\nexport const getSearchQueries = (options, searchType, next) => (dispatch) => {\r\n    let fetchUrl = url + '/'+ searchType + '/search?'+ options\r\n    console.log(fetchUrl)\r\n    if (next !== null){\r\n        if (next !== 'initial'){\r\n            fetchUrl = next\r\n        }\r\n        return fetch(fetchUrl,{\r\n            method: 'GET',\r\n        })  \r\n        .then(response => {\r\n            if (response.status !== 404)\r\n            return response.json()\r\n            else return response.status\r\n        })\r\n        .then(data => {\r\n            console.log(data)\r\n            if (data !== '404')\r\n            return dispatch(getSearchFetchSucces(data))\r\n        })\r\n    }\r\n    else return new Promise(function(resolve){resolve(dispatch(getSearchNone(null)))})\r\n}\r\n\r\nexport const addFavourite = (type, id) => (dispatch) => {\r\n    return fetch(url + '/favorites/'+ type + '/',{\r\n        method: 'POST',\r\n        body: JSON.stringify({'item_id':id}),  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        },  \r\n        \r\n    })  \r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        if (data !== '404')\r\n        return dispatch(onCreateResponse())\r\n        else return dispatch(notFoundError(data))\r\n    })\r\n}\r\n\r\nexport const getFavouritesQuery = (searchType, next) => (dispatch) => {\r\n    let fetchUrl = url + '/favorites/'+ searchType\r\n    console.log(fetchUrl)\r\n    if (next !== null){\r\n        if (next !== 'initial'){\r\n            fetchUrl = next\r\n        }\r\n        return fetch(fetchUrl,{\r\n            method: 'GET',\r\n        })  \r\n        .then(response => {\r\n            if (response.status === 200)\r\n            return response.json()\r\n            else return null\r\n        })\r\n        .then(data => {\r\n            console.log(data)\r\n            if (data !== null) return dispatch(getFavouritesFetchSucces(data))\r\n            else return dispatch(fetchError())\r\n        })\r\n    }\r\n    else return new Promise(function(resolve){resolve(dispatch(getFavouritesNone(null)))})\r\n}\r\n\r\nexport const getUserResponses = (userType, next, userId) => (dispatch) => {\r\n    let fetchUrl = url + '/'+ (userType === 'employer' ? 'cv' : 'vacancy') +'/response/' + userType + '/' + userId\r\n    if (next !== null){\r\n        if (next !== 'initial'){\r\n            fetchUrl = next\r\n        }\r\n        console.log(fetchUrl)\r\n        return fetch(fetchUrl,{\r\n            method: 'GET',\r\n        })  \r\n        .then(response => {\r\n            if (response.status !== 404)\r\n            return response.json()\r\n            else return response.status\r\n        })\r\n        .then(data => {\r\n            console.log(data)\r\n            if (data !== '404')\r\n            return dispatch(getResponseFetchSucces(data))\r\n        })\r\n    }\r\n    else return new Promise(function(resolve){resolve(dispatch(getResponseNone(null)))})\r\n}\r\n\r\nexport const getUserAnswers = (userType, next, userId) => (dispatch) => {\r\n    let fetchUrl = url + '/' + (userType === 'employer' ? 'vacancy' : 'cv') +'/response/' + userType + '/' + userId\r\n    if (next !== null){\r\n        if (next !== 'initial'){\r\n            fetchUrl = next\r\n        }\r\n        console.log(fetchUrl)\r\n\r\n        return fetch(fetchUrl,{\r\n            method: 'GET',\r\n        })  \r\n        .then(response => {\r\n            if (response.status !== 404)\r\n            return response.json()\r\n            else return response.status\r\n        })\r\n        .then(data => {\r\n            console.log(data)\r\n            if (data !== '404')\r\n            return dispatch(getAnswersFetchSucces(data))\r\n        })\r\n    }\r\n    else return new Promise(function(resolve){resolve(dispatch(getAnswersNone(null)))})\r\n}\r\n\r\nexport const createResponse = (type, data) => (dispatch) => {\r\n    return fetch(url + '/' + type + '/response/',{\r\n        method: 'POST',\r\n        body: JSON.stringify(data),  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        },  \r\n        \r\n    })  \r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        if (data !== '404')\r\n        return dispatch(onCreateResponse())\r\n        else return dispatch(notFoundError(data))\r\n    })\r\n}\r\n\r\nexport const changeAnswer = (id, responseType, type) => (dispatch) => {\r\n    return fetch(url + '/' + responseType + '/response/',{\r\n        method: 'PUT',\r\n        body: JSON.stringify({'state':type, 'id':id}),  \r\n        headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            \r\n        },  \r\n        \r\n    })  \r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n        if (data !== '404')\r\n        return dispatch(onCreateResponse())\r\n        else return dispatch(notFoundError(data))\r\n    })\r\n}\r\n\r\nexport const getVacancy = (vacancyId) => (dispatch) =>{\r\n    return fetch(url + '/vacancy/'+vacancyId,{\r\n        method: 'GET',\r\n    })  \r\n    .then(response => {\r\n        if (response.status !== 404)\r\n        return response.json()\r\n        else return response.status\r\n    })\r\n    .then(data => {\r\n        console.log(data)\r\n        return dispatch(getVacancyFetchSucces(data))\r\n    })\r\n}\r\n\r\nexport const getResume = (resumeId) => (dispatch) =>{\r\n    return fetch(url + '/cv/' + resumeId,{\r\n        method: 'GET',\r\n    })  \r\n    .then(response => {\r\n        if (response.status !== 404)\r\n        return response.json()\r\n        else return response.status\r\n    })\r\n    .then(data => {\r\n        console.log(data)\r\n        return dispatch(getResumeFetchSucces(data))\r\n    })\r\n}","D:\\react тесты\\diploma\\dev\\src\\reducers\\favourites.js",["105"],"const initialState = {\r\n    favouritesLoading:false,\r\n    error:false,\r\n    next:'initial',\r\n    favouritesCount: 0,\r\n    favouritesValues:[],\r\n};\r\n  \r\n  \r\nexport default function userState(state = initialState, action){\r\n    if (action.type === 'FAVOURITES_UPDATE_VALUES'){\r\n        action.payload.map((item)=>{state.favouritesValues.push(item)});\r\n        state.favouritesValues = Object.assign([], state.favouritesValues, [...state.favouritesValues]);\r\n\r\n        return {\r\n            ...state\r\n        };\r\n    }\r\n    else if (action.type === 'FAVOURITES_SORT_VALUES'){\r\n        state.favouritesValues = action.payload;\r\n        state.favouritesValues = Object.assign([], state.favouritesValues, [...state.favouritesValues]);\r\n        return {\r\n            ...state\r\n        };\r\n    }\r\n    else if (action.type === 'FAVOURITES_UPDATE_VALUES_PHOTO'){\r\n        let value = state.favouritesValues.find(x => x.pk === action.payload.id)\r\n        if (value !== undefined) value.photo_url = action.payload.photo\r\n        state.favouritesValues = Object.assign([], state.favouritesValues, [...state.favouritesValues]);\r\n\r\n        return {\r\n            ...state\r\n        };\r\n    }\r\n    else if (action.type === 'FAVOURITES_VALUES_ERROR'){\r\n        state.error = true;\r\n        return {\r\n            ...state\r\n        };\r\n    }\r\n    else if (action.type === 'FAVOURITES_START_LOADING'){\r\n        state.favouritesLoading = true;\r\n        return {\r\n            ...state\r\n        };\r\n    }\r\n    else if (action.type === 'FAVOURITES_STOP_LOADING'){\r\n        state.favouritesLoading = false;\r\n        return {\r\n            ...state\r\n        };\r\n    }\r\n    else if (action.type === 'FAVOURITES_NULLIFY_VALUES'){\r\n        state.favouritesValues = []\r\n        state.next = 'initial'\r\n        return {\r\n            ...state\r\n        };\r\n    }\r\n    else if (action.type === 'GET_FAVOURITES_QUERY_FETCH_SUCCES'){\r\n        state.next = action.data.next\r\n        return {\r\n            ...state\r\n        };\r\n    }\r\n    return state;\r\n}","D:\\react тесты\\diploma\\dev\\src\\reducers\\userData.js",[],"D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\ProfileRedactPopup\\redactPopupSections\\RedactPopupSectionImages.js",[],"D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\ProfileRedactPopup\\ImageCropper.js",["106"],"D:\\react тесты\\diploma\\dev\\src\\reducers\\nav.js",[],"D:\\react тесты\\diploma\\dev\\src\\components\\CompanyProfile\\Main\\Main.js",["107"],"D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\Resumes\\ResumeRedactPopup\\ResumeRedactPopup.js",[],"D:\\react тесты\\diploma\\dev\\src\\components\\Nav\\Nav.js",["108","109","110"],"D:\\react тесты\\diploma\\dev\\src\\components\\Search\\Search.js",["111"],"D:\\react тесты\\diploma\\dev\\src\\components\\Profile\\ProfileRedactPopup\\ImageCropper.js",["112"],"D:\\react тесты\\diploma\\dev\\src\\components\\Nav\\Popup\\Popup.js",["113"],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":9,"column":8,"nodeType":"120","messageId":"121","endLine":9,"endColumn":25},{"ruleId":"118","severity":1,"message":"122","line":11,"column":10,"nodeType":"120","messageId":"121","endLine":11,"endColumn":16},{"ruleId":"123","severity":1,"message":"124","line":161,"column":50,"nodeType":"125","messageId":"126","endLine":161,"endColumn":52},{"ruleId":"118","severity":1,"message":"127","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":14},{"ruleId":"118","severity":1,"message":"128","line":8,"column":8,"nodeType":"120","messageId":"121","endLine":8,"endColumn":20},{"ruleId":"129","severity":1,"message":"130","line":22,"column":11,"nodeType":"131","endLine":33,"endColumn":6},{"ruleId":"118","severity":1,"message":"132","line":58,"column":11,"nodeType":"120","messageId":"121","endLine":58,"endColumn":14},{"ruleId":"118","severity":1,"message":"133","line":64,"column":22,"nodeType":"120","messageId":"121","endLine":64,"endColumn":33},{"ruleId":"118","severity":1,"message":"134","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":19},{"ruleId":"118","severity":1,"message":"135","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":20},{"ruleId":"114","replacedBy":"136"},{"ruleId":"116","replacedBy":"137"},{"ruleId":"118","severity":1,"message":"138","line":45,"column":10,"nodeType":"120","messageId":"121","endLine":45,"endColumn":31},{"ruleId":"123","severity":1,"message":"124","line":12,"column":34,"nodeType":"125","messageId":"126","endLine":12,"endColumn":36},{"ruleId":"118","severity":1,"message":"139","line":4,"column":8,"nodeType":"120","messageId":"121","endLine":4,"endColumn":16},{"ruleId":"118","severity":1,"message":"140","line":7,"column":8,"nodeType":"120","messageId":"121","endLine":7,"endColumn":23},{"ruleId":"118","severity":1,"message":"141","line":1,"column":28,"nodeType":"120","messageId":"121","endLine":1,"endColumn":37},{"ruleId":"118","severity":1,"message":"142","line":10,"column":8,"nodeType":"120","messageId":"121","endLine":10,"endColumn":12},{"ruleId":"143","severity":1,"message":"144","line":241,"column":113,"nodeType":"145","endLine":241,"endColumn":185},{"ruleId":"118","severity":1,"message":"146","line":10,"column":9,"nodeType":"120","messageId":"121","endLine":10,"endColumn":25},{"ruleId":"118","severity":1,"message":"139","line":4,"column":8,"nodeType":"120","messageId":"121","endLine":4,"endColumn":16},{"ruleId":"147","severity":1,"message":"148","line":273,"column":106,"nodeType":"149","endLine":273,"endColumn":118},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'placeholderAvatar' is defined but never used.","Identifier","unusedVar","'InView' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Loader' is defined but never used.","'fileUploader' is defined but never used.","react-hooks/exhaustive-deps","The 'onMove' function makes the dependencies of useEffect Hook (at line 43) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'onMove' in its own useCallback() Hook.","VariableDeclarator","'pos' is assigned a value but never used.","'setPosition' is assigned a value but never used.","'addResume' is defined but never used.","'addVacancy' is defined but never used.",["150"],["151"],"'verifyUserFetchSucces' is defined but never used.","'firebase' is defined but never used.","'photoRedactIcon' is defined but never used.","'useEffect' is defined but never used.","'bell' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'getSearchQueries' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]